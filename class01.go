// 整型分为以下两个大类： 按长度分为：int8、int16、int32、int64 对应的无符号整型：uint8、uint16、uint32、uint64

// 其中，uint8就是我们熟知的byte型，int16对应C语言中的short型，int64对应C语言中的long型。

// 类型	描述
// uint8	无符号 8位整型 (0 到 255)
// uint16	无符号 16位整型 (0 到 65535)
// uint32	无符号 32位整型 (0 到 4294967295)
// uint64	无符号 64位整型 (0 到 18446744073709551615)
// int8	有符号 8位整型 (-128 到 127)
// int16	有符号 16位整型 (-32768 到 32767)
// int32	有符号 32位整型 (-2147483648 到 2147483647)
// int64	有符号 64位整型 (-9223372036854775808 到 9223372036854775807)

// 特殊整型
// 类型	描述
// uint	32位操作系统上就是uint32，64位操作系统上就是uint64
// int	32位操作系统上就是int32，64位操作系统上就是int64
// uintptr	无符号整型，用于存放一个指针
// 注意： 在使用int和 uint类型时，不能假定它是32位或64位的整型，而是考虑int和uint可能在不同平台上的差异。

// 注意事项 获取对象的长度的内建len()函数返回的长度可以根据不同平台的字节长度进行变化。实际使用中，切片或 map 的元素数量等都可以用int来表示。在涉及到二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用int和 uint。

// 数字字面量语法（Number literals syntax）
// Go1.13版本之后引入了数字字面量语法，这样便于开发者以二进制、八进制或十六进制浮点数的格式定义数字，例如：

// v := 0b00101101， 代表二进制的 101101，相当于十进制的 45。 v := 0o377，代表八进制的 377，相当于十进制的 255。 v := 0x1p-2，代表十六进制的 1 除以 2²，也就是 0.25。

// 而且还允许我们用 _ 来分隔数字，比如说： v := 123_456 表示 v 的值等于 123456。

// 我们可以借助fmt函数来将一个整数以不同进制形式展示。
package main

import "fmt"

func main() {
	var a uint = 22
	fmt.Println(a)
}
